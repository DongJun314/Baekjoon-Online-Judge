** 핵심 **
1. 이 문제의 핵심은 짝을 매칭하는 즉, 배열의 반으로 나누는 것
2. 자료구조 벡터가 아닌, 수학 벡터라는 것
3. 수학 벡터의 방향을 bool로 시작점은 true, 끝점은 false로 방문 처리를 통해 구현하기

====================================================================================

#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

struct POINT
{
    long long x{ 0 };
    long long y{ 0 };
};

double ansMin;

void DFS(const vector<POINT>& _vecPoints, vector<bool>& _vecVisited, 
    int _curIndex, int _cnt)
{        
    const int N = static_cast<int>(_vecPoints.size());

    if (_cnt == N / 2)
    {
        POINT origin = { 0,0 };
        for (int i = 0; i < N; i++)
        {
            if (true == _vecVisited[i])
            {
                origin.x -= _vecPoints[i].x;
                origin.y -= _vecPoints[i].y;
            }
            else
            {
                origin.x += _vecPoints[i].x;
                origin.y += _vecPoints[i].y;
            }
        }

        double length = sqrt(pow(origin.x, 2) + pow(origin.y, 2));
        ansMin = min(ansMin, length);
        return;
    }

    for (int i = _curIndex; i < N; i++)
    {
        _vecVisited[i] = true;
        DFS(_vecPoints, _vecVisited, i + 1, _cnt + 1);
        _vecVisited[i] = false;
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);
    
    int testCase;
    cin >> testCase;

    for (int caseX = 0; caseX < testCase; ++caseX)
    {
        ansMin = 1.7976931348623158e+308;

        int numPoints;
        cin >> numPoints;

        vector<POINT> vecPoints;
        vecPoints.resize(numPoints);

        for (int point = 0; point < numPoints; ++point)
        {
            int x, y;
            cin >> x >> y;
            vecPoints[point] = POINT{ x, y };
        }

        vector<bool> vecVisited;
        vecVisited.resize(numPoints);
        DFS(vecPoints, vecVisited, 0, 0);
        
        cout << fixed;
        cout.precision(12);
        cout << ansMin << '\n';
    }

    return 0;
}
