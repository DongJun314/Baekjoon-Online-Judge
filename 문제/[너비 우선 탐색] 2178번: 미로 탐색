** 핵심 ** 
1. 너비 우선 탐색에 대한 이해
2. 주변을 먼저 탐색한 후 깊이를 추가하기

--------------------

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

static int stRow{ 0 }, stColumn{ 0 };
static int stArrowX[]{ 0, 1, 0, -1 };
static int stArrowY[]{ 1, 0, -1, 0 }; 

static vector<vector<int>> stVecMaze;
static vector<vector<bool>> stVecVisitedMaze;

void BFS(int _iRow, int _iColumn);

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    std::cin >> stRow >> stColumn;

    stVecMaze.resize(stRow, vector<int>(stColumn, 0));
    stVecVisitedMaze.resize(stRow, vector<bool>(stColumn, false));

    for (int iX = 0;  iX < stRow;  iX++)
    {
        string strString;
        std::cin >> strString;

        for (int iY = 0; iY < stColumn; iY++)
        {
            stVecMaze[iX][iY] = strString[iY] - '0';
        }
    }

    BFS(0, 0);

    std::cout << stVecMaze[stRow - 1][stColumn - 1];

    return 0;
}

void BFS(int _iRow, int _iColumn)
{
    std::queue<std::pair<int, int>> qBFS;
    qBFS.push(std::make_pair(_iRow, _iColumn));
    stVecVisitedMaze[_iRow][_iColumn] = true;

    while (!qBFS.empty())
    {
        std::pair<int, int> prIndex = qBFS.front();
        qBFS.pop();

        for (int i = 0; i < 4; i++)
        {
            int iRow = prIndex.first + stArrowX[i];
            int iColumn = prIndex.second + stArrowY[i];

            if (iRow >= 0 && iRow < stRow && iColumn >= 0 && iColumn < stColumn)
            {
                if (!stVecVisitedMaze[iRow][iColumn] && stVecMaze[iRow][iColumn] != 0)
                {
                    stVecVisitedMaze[iRow][iColumn] = true;
                    stVecMaze[iRow][iColumn] = stVecMaze[prIndex.first][prIndex.second] + 1;
                    qBFS.push(std::make_pair(iRow, iColumn));
                }
            }
        }
    }
}
