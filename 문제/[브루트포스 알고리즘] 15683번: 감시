** 핵심 **
1. 여러방향을 감시해도, 결국 처리는 한방향 일자로 처리해야한다

*********************************************************

#include <iostream>
#include <algorithm>
#include <vector>

#define INF 987654321

using namespace std;

typedef pair<int, int> CCTV;

int iRowSize{ 0 }, iColSize{ 0 };
vector<vector<int>> vecOfficeMap; // 2D 배열을 vector로 변경
vector<vector<CCTV>> vecCams(5); // 타입별로 저장된 CCTV 정보
vector<int> vecDirRow{ 0, -1, 0, 1 }; // 0=right, 1=up, 2=left, 3=down
vector<int> vecDirCol{ 1, 0, -1, 0 };
vector<vector<int>> vecDirCCTV = // CCTV 방향 설정 (1~5번 타입)
{   
    {1, 0, 0, 0, 4},
    {1, 0, 1, 0, 2},
    {1, 1, 0, 0, 4},
    {1, 1, 1, 0, 4},
    {1, 1, 1, 1, 1}
};

void Watch(int _iRow, int _iCol, int _iDir)
{
    int iCurRow{ _iRow }, iCurCol{ _iCol };

    while (true) 
    {
        int iNextRow = iCurRow + vecDirRow[_iDir];
        int iNextCol = iCurCol + vecDirCol[_iDir];

        if (iNextRow < 0 || iNextRow >= iRowSize || iNextCol < 0 || iNextCol >= iColSize)
            return;
        if (vecOfficeMap[iNextRow][iNextCol] == 6) 
            return;

        vecOfficeMap[iNextRow][iNextCol] = 7;
        iCurRow = iNextRow;
        iCurCol = iNextCol;
    }
}

int FindBlindSpot(int _iCurType, int _CurIndex) 
{
    if (_iCurType == 5) // 모든 타입의 CCTV를 처리한 경우
    { 
        int iSum{ 0 };
        for (int iRow = 0; iRow < iRowSize; ++iRow)
        {
            for (int iCol = 0; iCol < iColSize; ++iCol)
            {
                if (vecOfficeMap[iRow][iCol] == 0) 
                {
                    ++iSum;
                }
            }
        }
        return iSum;
    }

    if (_CurIndex == vecCams[_iCurType].size()) // 현재 타입의 CCTV를 모두 처리한 경우
        return FindBlindSpot(_iCurType + 1, 0);

    vector<vector<int>> vecMapBackup = vecOfficeMap; // 백업을 벡터로 처리
    int iMinBlindSpot{ INF };

    int iCurRow = vecCams[_iCurType][_CurIndex].first;
    int iCurCol = vecCams[_iCurType][_CurIndex].second;

    for (int iRotation = 0; iRotation < vecDirCCTV[_iCurType][4]; ++iRotation)
    {
        vecOfficeMap = vecMapBackup; // 백업으로 복원

        for (int iDir = 0; iDir < 4; ++iDir)
        {
            if (vecDirCCTV[_iCurType][iDir] == 0) continue;
            Watch(iCurRow, iCurCol, (iRotation + iDir) % 4);
        }

        iMinBlindSpot = min(iMinBlindSpot, FindBlindSpot(_iCurType, _CurIndex + 1));
    }

    return iMinBlindSpot;
}

int main() 
{
    cin >> iRowSize >> iColSize;

    vecOfficeMap.resize(iRowSize, vector<int>(iColSize)); // Map 벡터 크기 초기화

    for (int iRow = 0; iRow < iRowSize; ++iRow)
    {
        for (int iCol = 0; iCol < iColSize; ++iCol)
        {
            cin >> vecOfficeMap[iRow][iCol];

            if (vecOfficeMap[iRow][iCol] >= 1 && vecOfficeMap[iRow][iCol] <= 5)
            {
                vecCams[vecOfficeMap[iRow][iCol] - 1].emplace_back(iRow, iCol); // 타입별로 저장
            }
        }
    }

    cout << FindBlindSpot(0, 0);

    return 0;
}
