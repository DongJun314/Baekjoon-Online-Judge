** 핵심 **
1. 문제의 핵심은 순환을 DFS로 찾고, 거리를 BFS 구하는 것이다.
2. 순환 시작점과 끝점을 발견했을때, 이를 return 하면서 배열을 체크해준다
3. 거리를 구할때는, 우선 순환 점들은 Circle 체크 배열을 통해 0으로 값을 대입하고, 방문처리를 하여 반복되는 방문이 없도록 하고, 나머지 노드들은 방문처리를 하면서, 거리를 누적해서 추가해준다.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

int  iResultArr[3001];
bool bIsVisited[3001];
bool bIsCircle[3001];

int DFSFindCircle(int _iBeforeNode, int _iCurNode, const vector<vector<int>>& _vecAdjList)
{
    bIsVisited[_iCurNode] = true;

    for (int iNextNode : _vecAdjList[_iCurNode])
    {
        if (_iBeforeNode == iNextNode)
            continue;
        
        if (!bIsVisited[iNextNode])
        {
            int iCircle = DFSFindCircle(_iCurNode, iNextNode, _vecAdjList);

            if (iCircle == -2)
                return -2;

            if (iCircle != -1)
            {
                bIsCircle[_iCurNode] = true;

                if (_iCurNode == iCircle) { return -2; }
                else { return iCircle; }
            }
        }
        else
        {
            bIsCircle[_iCurNode] = true;
            return iNextNode;
        }
    }

    return -1;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);

    int iNodeCnt{ 0 };
    cin >> iNodeCnt;

    vector<vector<int>> vecAdjList;
    vecAdjList.resize(iNodeCnt + 1);

    for (int i = 0; i < iNodeCnt; i++)
    {
        int iNodeA{ 0 }, iNodeB{ 0 };
        cin >> iNodeA >> iNodeB;

        vecAdjList[iNodeA].push_back(iNodeB);
        vecAdjList[iNodeB].push_back(iNodeA);
    }

    // DFS 순환 찾기
    fill(bIsVisited, bIsVisited + 3001, false);
    fill(bIsCircle, bIsCircle + 3001, false);
    DFSFindCircle(-1, 1, vecAdjList);

    // 최소 거리 탐색 BFS + 방문배열 + 결과 저장 배열
    fill(bIsVisited, bIsVisited + 3001, false);
    fill(iResultArr, iResultArr + 3001, -1);

    queue<int> qBFS;
    
    for (int i = 1; i <= iNodeCnt; i++)
    {
        if (bIsCircle[i])
        {
            qBFS.push(i);
            bIsVisited[i] = true;
            iResultArr[i] = 0;
        }
    }

    while (!qBFS.empty())
    {
        int iCurNode = qBFS.front();
        qBFS.pop();

        for (int iNextNode : vecAdjList[iCurNode])
        {
            if (!bIsVisited[iNextNode])
            {
                qBFS.push(iNextNode);
                bIsVisited[iNextNode] = true;
                iResultArr[iNextNode] = iResultArr[iCurNode] + 1;
            }
        }
    }

    // 출력
    for (int i = 1; i <= iNodeCnt; i++)
    {
        cout << iResultArr[i] << ' ';
    }

    return 0;
}
