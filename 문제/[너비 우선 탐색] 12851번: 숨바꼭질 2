** 핵심 **
1. 이 문제의 핵심은 다양한 경우의 수가 존재하면서 최단 시간을 구하는 것
2. 이럴 경우, 다음 방문할 예정인 위치에 방문 처리를 하지 않는 것이 핵심
3. bool값을 이용해 처음 방문 여부를 체크할 수도 있지만, iMaxCnt로 0이냐 이상이냐에 따라서 처음 방문 했는지 여부를 확인할 수 있다.

------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <queue>
using namespace std;

#define ARR_CNT(iArr) std::size(iArr)

int iStartPos{ 0 }, iEndPos{ 0 }, iMinSec{ 0 }, iMaxCnt{ 0 };
bool bArrVisited[100001];

void BFS()
{
    queue<pair<int, int>> qBFS;
    qBFS.push({iStartPos, 0});
    bArrVisited[iStartPos] = true;

    while (!qBFS.empty())
    {
        pair<int, int> prBFS = qBFS.front();
        qBFS.pop();
        int iCurPos = prBFS.first;
        int iCurSec = prBFS.second;
        bArrVisited[iCurPos] = true;

        if (iMaxCnt && iCurPos == iEndPos && iCurSec == iMinSec)
            ++iMaxCnt;

        if (!iMaxCnt && iCurPos == iEndPos)
        {
            iMinSec = iCurSec;
            ++iMaxCnt;
        }

        int iArrNextPoses[] = { iCurPos - 1, iCurPos + 1, iCurPos * 2 };
        int iNextPos{ 0 };

        for (int i = 0; i < ARR_CNT(iArrNextPoses); i++)
        {
            iNextPos = iArrNextPoses[i];

            if (iNextPos >= 0 && iNextPos <= 100000 && !bArrVisited[iNextPos])
            {
                qBFS.push({ iNextPos, iCurSec + 1 });
            }
        }
    }
}

int main(void)
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);

    cin >> iStartPos >> iEndPos;

    BFS();

    cout << iMinSec << '\n' << iMaxCnt;
    
    return 0;
}
