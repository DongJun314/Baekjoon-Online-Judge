** 핵심 ** 
1. 재귀가 어려우면, 실제 값들을 대입해서 계산해봐라
2. 재귀라고 꼭 for문이 들어가는것은 아니다

-----------------------------------------------

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

static int iFormulaLength{ 0 }, iMaxValue{ INT32_MIN };
static string strFormula;
static vector<int> vecNums;
static vector<char> vecOperators;

int Calculator(int _iA, int _iB, char _szOperator)
{
    if (_szOperator == '+') { return _iA + _iB; }
    else if(_szOperator == '-') { return _iA - _iB; }
    else if (_szOperator == '*') { return _iA * _iB; }
    return 0;
}

void FindMaxValue(int _iIndex, int _iCurValue) 
{
    if (_iIndex >= vecNums.size())
    {
        iMaxValue = max(iMaxValue, _iCurValue);
        return;
    }

    int iValueNoBracket = Calculator(_iCurValue, vecNums[_iIndex], vecOperators[_iIndex - 1]);
    FindMaxValue(_iIndex + 1, iValueNoBracket);

    if (_iIndex + 1 < vecNums.size())
    {                                        
        int iValueNextWithBracket = Calculator(vecNums[_iIndex], vecNums[_iIndex + 1], vecOperators[_iIndex]);
        int iValueWithBracket = Calculator(_iCurValue, iValueNextWithBracket, vecOperators[_iIndex - 1]);
        FindMaxValue(_iIndex + 2, iValueWithBracket);
    }
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);

    cin >> iFormulaLength >> strFormula;

    for (int i = 0; i < iFormulaLength; i++)
    {
        if (i % 2 == 0) { vecNums.push_back(strFormula[i] - '0'); }
        else { vecOperators.push_back(strFormula[i]); }
    }

    FindMaxValue(1, vecNums[0]);

    cout << iMaxValue;

    return 0;
}
